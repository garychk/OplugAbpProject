// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OplugAbpProject.EntityFrameworkCore;

namespace OplugAbpProject.Migrations
{
    [DbContext(typeof(OplugAbpProjectDbContext))]
    [Migration("20190729113947_AddERPModel")]
    partial class AddERPModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Abp.Application.Editions.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("AbpEditions");
                });

            modelBuilder.Entity("Abp.Application.Features.FeatureSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FeatureSetting");
                });

            modelBuilder.Entity("Abp.Auditing.AuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<string>("CustomData")
                        .HasMaxLength(2000);

                    b.Property<string>("Exception")
                        .HasMaxLength(2000);

                    b.Property<int>("ExecutionDuration");

                    b.Property<DateTime>("ExecutionTime");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("MethodName")
                        .HasMaxLength(256);

                    b.Property<string>("Parameters")
                        .HasMaxLength(1024);

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionDuration");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpAuditLogs");
                });

            modelBuilder.Entity("Abp.Authorization.PermissionSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsGranted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpRoleClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(256);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<long?>("UserLinkId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("UserName");

                    b.HasIndex("TenantId", "EmailAddress");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "UserName");

                    b.ToTable("AbpUserAccounts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasMaxLength(256);

                    b.Property<string>("ClaimValue");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "ClaimType");

                    b.ToTable("AbpUserClaims");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.HasIndex("TenantId", "LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLoginAttempt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<byte>("Result");

                    b.Property<string>("TenancyName")
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("UserNameOrEmailAddress")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("UserId", "TenantId");

                    b.HasIndex("TenancyName", "UserNameOrEmailAddress", "Result");

                    b.ToTable("AbpUserLoginAttempts");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserOrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<long>("OrganizationUnitId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "OrganizationUnitId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserOrganizationUnits");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "RoleId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserRoles");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireDate");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpUserTokens");
                });

            modelBuilder.Entity("Abp.BackgroundJobs.BackgroundJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<bool>("IsAbandoned");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576);

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<DateTime?>("LastTryTime");

                    b.Property<DateTime>("NextTryTime");

                    b.Property<byte>("Priority");

                    b.Property<short>("TryCount");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs");
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.Property<string>("Value")
                        .HasMaxLength(2000);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpSettings");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ChangeTime");

                    b.Property<byte>("ChangeType");

                    b.Property<long>("EntityChangeSetId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(48);

                    b.Property<string>("EntityTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeSetId");

                    b.HasIndex("EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChangeSet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512);

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64);

                    b.Property<string>("ClientName")
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<string>("ExtensionData");

                    b.Property<int?>("ImpersonatorTenantId");

                    b.Property<long?>("ImpersonatorUserId");

                    b.Property<string>("Reason")
                        .HasMaxLength(256);

                    b.Property<int?>("TenantId");

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "CreationTime");

                    b.HasIndex("TenantId", "Reason");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpEntityChangeSets");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("EntityChangeId");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512);

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512);

                    b.Property<string>("PropertyName")
                        .HasMaxLength(96);

                    b.Property<string>("PropertyTypeFullName")
                        .HasMaxLength(192);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisabled");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpLanguages");
                });

            modelBuilder.Entity("Abp.Localization.ApplicationLanguageText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int?>("TenantId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(67108864);

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Source", "LanguageName", "Key");

                    b.ToTable("AbpLanguageTexts");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("ExcludedUserIds")
                        .HasMaxLength(131072);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<string>("TenantIds")
                        .HasMaxLength(131072);

                    b.Property<string>("UserIds")
                        .HasMaxLength(131072);

                    b.HasKey("Id");

                    b.ToTable("AbpNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.NotificationSubscriptionInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .HasMaxLength(96);

                    b.Property<int?>("TenantId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.HasIndex("TenantId", "NotificationName", "EntityTypeName", "EntityId", "UserId");

                    b.ToTable("AbpNotificationSubscriptions");
                });

            modelBuilder.Entity("Abp.Notifications.TenantNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Data")
                        .HasMaxLength(1048576);

                    b.Property<string>("DataTypeName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityId")
                        .HasMaxLength(96);

                    b.Property<string>("EntityTypeAssemblyQualifiedName")
                        .HasMaxLength(512);

                    b.Property<string>("EntityTypeName")
                        .HasMaxLength(250);

                    b.Property<string>("NotificationName")
                        .IsRequired()
                        .HasMaxLength(96);

                    b.Property<byte>("Severity");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("AbpTenantNotifications");
                });

            modelBuilder.Entity("Abp.Notifications.UserNotificationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreationTime");

                    b.Property<int>("State");

                    b.Property<int?>("TenantId");

                    b.Property<Guid>("TenantNotificationId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "State", "CreationTime");

                    b.ToTable("AbpUserNotifications");
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<long?>("ParentId");

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TenantId", "Code");

                    b.ToTable("AbpOrganizationUnits");
                });

            modelBuilder.Entity("OplugAbpProject.Authorization.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("Description")
                        .HasMaxLength(5000);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsStatic");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<int?>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedName");

                    b.ToTable("AbpRoles");
                });

            modelBuilder.Entity("OplugAbpProject.Authorization.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AuthenticationSource")
                        .HasMaxLength(64);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(128);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("EmailConfirmationCode")
                        .HasMaxLength(328);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEmailConfirmed");

                    b.Property<bool>("IsLockoutEnabled");

                    b.Property<bool>("IsPhoneNumberConfirmed");

                    b.Property<bool>("IsTwoFactorEnabled");

                    b.Property<DateTime?>("LastLoginTime");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<DateTime?>("LockoutEndDateUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NormalizedEmailAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("PasswordResetCode")
                        .HasMaxLength(328);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(32);

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(128);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("TenantId");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenantId", "NormalizedEmailAddress");

                    b.HasIndex("TenantId", "NormalizedUserName");

                    b.ToTable("AbpUsers");
                });

            modelBuilder.Entity("OplugAbpProject.CMS.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .HasMaxLength(50);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("ExtendAttr")
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500);

                    b.Property<long>("Hits");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<bool>("IsHot");

                    b.Property<bool>("IsRec");

                    b.Property<bool>("IsTop");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(50);

                    b.Property<string>("Summary")
                        .HasMaxLength(500);

                    b.Property<string>("Tags")
                        .HasMaxLength(500);

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("OplugAbpProject.CMS.Businesses", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(500);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Contactor")
                        .HasMaxLength(50);

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("ExtendAttr")
                        .HasColumnType("text");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500);

                    b.Property<long>("Hits");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<decimal>("Price");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(50);

                    b.Property<string>("Summary")
                        .HasMaxLength(500);

                    b.Property<string>("Tags")
                        .HasMaxLength(500);

                    b.Property<string>("Telphone")
                        .HasMaxLength(50);

                    b.Property<int>("TenantId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VendName")
                        .HasMaxLength(50);

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(500);

                    b.Property<decimal>("latitude");

                    b.Property<decimal>("longitude");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("OplugAbpProject.CMS.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryIndex")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Childs");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("Icons")
                        .HasMaxLength(50);

                    b.Property<string>("Intro")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsHide");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Level");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(500);

                    b.Property<int>("ParentId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("OplugAbpProject.CMS.Comments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgainstCount");

                    b.Property<long>("AgreeCount");

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long>("ForeignId");

                    b.Property<long>("ParentId");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OplugAbpProject.CMS.Members", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Avatar")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<string>("Fax")
                        .HasMaxLength(20);

                    b.Property<string>("IDNum")
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<long>("Points");

                    b.Property<string>("Province")
                        .HasMaxLength(50);

                    b.Property<string>("QQ")
                        .HasMaxLength(50);

                    b.Property<string>("QQOpenID")
                        .HasMaxLength(20);

                    b.Property<string>("Sex")
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.Property<string>("WXOpenID")
                        .HasMaxLength(20);

                    b.Property<string>("Zipcode")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("OplugAbpProject.ERP.JobAsmbl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnalysisCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("AssemblyMatch")
                        .IsRequired();

                    b.Property<int>("AssemblySeq");

                    b.Property<int>("AutoRecOpr");

                    b.Property<string>("BasePartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("BaseRevisionNum")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<int>("BomLevel");

                    b.Property<int>("BomSequence");

                    b.Property<int>("CallLine");

                    b.Property<int>("CallNum");

                    b.Property<int>("Child");

                    b.Property<string>("CommentText")
                        .IsRequired();

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("DigitalFileName")
                        .IsRequired();

                    b.Property<bool>("Direct");

                    b.Property<string>("DrawNum")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<decimal>("DueHour");

                    b.Property<decimal>("EstBurUnitCost");

                    b.Property<decimal>("EstLbrUnitCost");

                    b.Property<decimal>("EstMtlBurUnitCost");

                    b.Property<decimal>("EstMtlUnitCost");

                    b.Property<decimal>("EstScrap");

                    b.Property<string>("EstScrapType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<decimal>("EstSubUnitCost");

                    b.Property<decimal>("EstUnitCost");

                    b.Property<int>("FinalOpr");

                    b.Property<string>("FindNum")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("GroupSeq");

                    b.Property<string>("IUM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("InCopyList");

                    b.Property<bool>("IssuedComplete");

                    b.Property<decimal>("IssuedQty");

                    b.Property<string>("JdfPrepressAction")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("JdfStatus")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("JobComplete");

                    b.Property<string>("JobNum")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<decimal>("LLABurdenCost");

                    b.Property<decimal>("LLALaborCost");

                    b.Property<decimal>("LLAMaterialBurCost");

                    b.Property<decimal>("LLAMaterialCost");

                    b.Property<decimal>("LLAMaterialLabCost");

                    b.Property<decimal>("LLAMaterialMtlBurCost");

                    b.Property<decimal>("LLAMaterialMtlCost");

                    b.Property<decimal>("LLAMaterialSubCost");

                    b.Property<decimal>("LLAMfgCompBurCost");

                    b.Property<decimal>("LLAMfgCompLabCost");

                    b.Property<decimal>("LLAMfgCompMtlBurCost");

                    b.Property<decimal>("LLAMfgCompMtlCost");

                    b.Property<decimal>("LLAMfgCompSubCost");

                    b.Property<decimal>("LLAMtlBurCost");

                    b.Property<decimal>("LLAProdHours");

                    b.Property<decimal>("LLASetupHours");

                    b.Property<decimal>("LLASubcontractCost");

                    b.Property<decimal>("LLEBurdenCost");

                    b.Property<decimal>("LLELaborCost");

                    b.Property<decimal>("LLEMaterialCost");

                    b.Property<decimal>("LLEMtlBurCost");

                    b.Property<decimal>("LLEProdHours");

                    b.Property<decimal>("LLESetupHours");

                    b.Property<decimal>("LLESubcontractCost");

                    b.Property<DateTime?>("LastConfigDate")
                        .HasColumnType("date");

                    b.Property<int>("LastConfigTime");

                    b.Property<string>("LastConfigUserID")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<bool>("LinkToContract");

                    b.Property<decimal>("MtlBurCost");

                    b.Property<decimal>("MtlBurRate");

                    b.Property<int>("NextPeer");

                    b.Property<int>("OperationType");

                    b.Property<int>("OrigMtlSeq");

                    b.Property<decimal>("OrigRequiredQty");

                    b.Property<string>("OrigRuleTag")
                        .IsRequired();

                    b.Property<string>("OrigStructTag")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<decimal>("OverRunQty");

                    b.Property<bool>("PAAFirm");

                    b.Property<string>("PAARef")
                        .IsRequired()
                        .HasMaxLength(36);

                    b.Property<bool>("PCLinkRemoved");

                    b.Property<int>("Parent");

                    b.Property<string>("PartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PartPlanInfo")
                        .IsRequired();

                    b.Property<bool>("PlanAsAsm");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("PrepressJobName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("PressDevice")
                        .IsRequired();

                    b.Property<int>("PriorPeer");

                    b.Property<decimal>("PullQty");

                    b.Property<decimal>("QtyPer");

                    b.Property<bool>("ReassignSNAsm");

                    b.Property<decimal>("ReceivedToStock");

                    b.Property<int>("RelatedOperation");

                    b.Property<bool>("RemovedFromPlan");

                    b.Property<int>("ReqRefDes");

                    b.Property<decimal>("RequiredQty");

                    b.Property<string>("RestoreFlag")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<string>("RevisionNum")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<bool>("SendToPrePress");

                    b.Property<bool>("SendToPress");

                    b.Property<int>("SendToPressInitiator");

                    b.Property<string>("SmartString")
                        .IsRequired();

                    b.Property<bool>("SmartStringProcessed");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("StartHour");

                    b.Property<decimal>("TLABurdenCost");

                    b.Property<decimal>("TLALaborCost");

                    b.Property<decimal>("TLAMaterialBurCost");

                    b.Property<decimal>("TLAMaterialCost");

                    b.Property<decimal>("TLAMaterialLabCost");

                    b.Property<decimal>("TLAMaterialMtlBurCost");

                    b.Property<decimal>("TLAMaterialMtlCost");

                    b.Property<decimal>("TLAMaterialSubCost");

                    b.Property<decimal>("TLAMfgCompBurCost");

                    b.Property<decimal>("TLAMfgCompLabCost");

                    b.Property<decimal>("TLAMfgCompMtlBurCost");

                    b.Property<decimal>("TLAMfgCompMtlCost");

                    b.Property<decimal>("TLAMfgCompSubCost");

                    b.Property<decimal>("TLAMtlBurCost");

                    b.Property<decimal>("TLAODCCost");

                    b.Property<decimal>("TLAProdHours");

                    b.Property<decimal>("TLASetupHours");

                    b.Property<decimal>("TLASubcontractCost");

                    b.Property<decimal>("TLEBurdenCost");

                    b.Property<decimal>("TLELaborCost");

                    b.Property<decimal>("TLEMaterialCost");

                    b.Property<decimal>("TLEMtlBurCost");

                    b.Property<decimal>("TLEProdHours");

                    b.Property<decimal>("TLESetupHours");

                    b.Property<decimal>("TLESubcontractCost");

                    b.Property<int>("TenantId");

                    b.Property<decimal>("TotalCost");

                    b.Property<decimal>("TotalMtlBurCost");

                    b.Property<decimal>("TotalMtlLabCost");

                    b.Property<decimal>("TotalMtlMtlCost");

                    b.Property<decimal>("TotalMtlSubCost");

                    b.Property<string>("UserMapData")
                        .IsRequired();

                    b.Property<bool>("ValRefDes");

                    b.Property<DateTime?>("WIDueDate")
                        .HasColumnType("date");

                    b.Property<decimal>("WIDueHour");

                    b.Property<DateTime?>("WIStartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("WIStartHour");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<decimal>("Weight");

                    b.Property<string>("WeightUOM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("WhseAllocFlag");

                    b.HasKey("Id");

                    b.ToTable("JobAsmbl");
                });

            modelBuilder.Entity("OplugAbpProject.ERP.JobHead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnalysisCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("BasePartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("BaseRevisionNum")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<int>("CallLine");

                    b.Property<int>("CallNum");

                    b.Property<bool>("Candidate");

                    b.Property<int>("CloseMeterReading");

                    b.Property<DateTime?>("ClosedDate")
                        .HasColumnType("date");

                    b.Property<string>("CommentText")
                        .IsRequired();

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("CustID")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("CustName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("DatePurged")
                        .HasColumnType("date");

                    b.Property<int>("DaysLate");

                    b.Property<string>("DrawNum")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<bool>("DtlsWithinLeadTime");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("date");

                    b.Property<decimal>("DueHour");

                    b.Property<int>("EPMExportLevel");

                    b.Property<string>("EquipID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ExpenseCode")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("ExportRequested")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<bool>("ExternalMES");

                    b.Property<bool>("Forward");

                    b.Property<int>("GroupSeq");

                    b.Property<int>("HDCaseNum");

                    b.Property<string>("IUM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("InCopyList");

                    b.Property<bool>("IsCSRSet");

                    b.Property<string>("IssueTopics")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("JobCSR")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("JobClosed");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<bool>("JobComplete");

                    b.Property<DateTime?>("JobCompletionDate")
                        .HasColumnType("date");

                    b.Property<bool>("JobEngineered");

                    b.Property<bool>("JobFirm");

                    b.Property<bool>("JobHeld");

                    b.Property<string>("JobNum")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<bool>("JobReleased");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("JobWorkflowState")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastChangedBy")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<DateTime?>("LastChangedOn")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastExternalMESDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("LastScheduleDate")
                        .HasColumnType("date");

                    b.Property<string>("LastScheduleProc")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("LockQty");

                    b.Property<string>("MSPPredecessor")
                        .IsRequired();

                    b.Property<string>("MSPTaskID")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("MaintPriority")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<bool>("NoAutoClosing");

                    b.Property<bool>("NoAutoCompletion");

                    b.Property<bool>("NumberSource");

                    b.Property<decimal>("OrigProdQty");

                    b.Property<string>("OwnershipStatus")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<bool>("PAAExists");

                    b.Property<bool>("PCLinkRemoved");

                    b.Property<string>("PDMObjID")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("PartDescription")
                        .IsRequired();

                    b.Property<string>("PartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PersonID")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("PersonList")
                        .IsRequired();

                    b.Property<string>("PhaseID")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("PlanGUID")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("PlanNum");

                    b.Property<string>("PlanUserID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PlannedActionDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PlannedKitDate")
                        .HasColumnType("date");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<bool>("PreserveOrigQtys");

                    b.Property<string>("ProcSuspendedUpdates")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ProcessMode")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("ProdCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<decimal>("ProdQty");

                    b.Property<string>("ProdTeamID")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<bool>("ProductionYield");

                    b.Property<bool>("ProjProcessed");

                    b.Property<DateTime?>("ProjProcessedDate");

                    b.Property<string>("ProjectID")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<decimal>("QtyCompleted");

                    b.Property<int>("QuoteLine");

                    b.Property<int>("QuoteNum");

                    b.Property<DateTime?>("ReqDueDate")
                        .HasColumnType("date");

                    b.Property<string>("ResTopics")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("RestoreFlag")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<string>("RevisionNum")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<bool>("RoughCut");

                    b.Property<bool>("RoughCutScheduled");

                    b.Property<string>("SchedCode")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("SchedLocked");

                    b.Property<int>("SchedPriority");

                    b.Property<int>("SchedSeq");

                    b.Property<string>("SchedStatus")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<bool>("SplitJob");

                    b.Property<bool>("SplitMfgCostElements");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("StartHour");

                    b.Property<DateTime?>("StatusLastPrinted")
                        .HasColumnType("date");

                    b.Property<bool>("StatusReadyToPrint");

                    b.Property<bool>("SyncReqBy");

                    b.Property<byte[]>("SysRevID")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasMaxLength(8);

                    b.Property<Guid>("SysRowID");

                    b.Property<int>("TenantId");

                    b.Property<DateTime?>("TravelerLastPrinted")
                        .HasColumnType("date");

                    b.Property<bool>("TravelerReadyToPrint");

                    b.Property<bool>("UnReadyCostProcess");

                    b.Property<string>("UserMapData")
                        .IsRequired();

                    b.Property<DateTime?>("WIDueDate")
                        .HasColumnType("date");

                    b.Property<decimal>("WIDueHour");

                    b.Property<string>("WIName")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<bool>("WIPCleared");

                    b.Property<DateTime?>("WIStartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("WIStartHour");

                    b.Property<bool>("WhseAllocFlag");

                    b.Property<int>("XRefCustNum");

                    b.Property<string>("XRefPartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("XRefPartType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.HasKey("Id");

                    b.ToTable("JobHead");
                });

            modelBuilder.Entity("OplugAbpProject.ERP.JobMtl", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("APSAddResType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<bool>("AddedMtl");

                    b.Property<string>("AnalysisCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("AssemblySeq");

                    b.Property<bool>("BackFlush");

                    b.Property<string>("BasePartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("BaseRequiredQty");

                    b.Property<string>("BaseRevisionNum")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<string>("BaseUOM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("Billable");

                    b.Property<decimal>("BillableUnitPrice");

                    b.Property<decimal>("BorrowedQty");

                    b.Property<bool>("BuyIt");

                    b.Property<int>("CallLine");

                    b.Property<int>("CallNum");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("ContractID")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<bool>("Direct");

                    b.Property<decimal>("DocBillableUnitPrice");

                    b.Property<decimal>("DocUnitPrice");

                    b.Property<decimal>("EstBurUnitCost");

                    b.Property<decimal>("EstLbrUnitCost");

                    b.Property<decimal>("EstMtlBurUnitCost");

                    b.Property<decimal>("EstMtlUnitCost");

                    b.Property<decimal>("EstScrap");

                    b.Property<string>("EstScrapType")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<string>("EstStdDescription")
                        .IsRequired();

                    b.Property<int>("EstStdType");

                    b.Property<decimal>("EstSubUnitCost");

                    b.Property<decimal>("EstUnitCost");

                    b.Property<string>("FindNum")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("FixedQty");

                    b.Property<string>("GeneralPlanInfo")
                        .IsRequired();

                    b.Property<bool>("GlbRFQ");

                    b.Property<int>("GroupSeq");

                    b.Property<string>("IUM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("IsPOCostingMaintained");

                    b.Property<bool>("IssuedComplete");

                    b.Property<decimal>("IssuedQty");

                    b.Property<bool>("JobComplete");

                    b.Property<string>("JobNum")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<int>("LeadTime");

                    b.Property<bool>("LinkToContract");

                    b.Property<decimal>("LoanedQty");

                    b.Property<decimal>("MaterialBurCost");

                    b.Property<decimal>("MaterialLabCost");

                    b.Property<decimal>("MaterialMtlCost");

                    b.Property<decimal>("MaterialSubCost");

                    b.Property<string>("MfgComment")
                        .IsRequired();

                    b.Property<bool>("MiscCharge");

                    b.Property<string>("MiscCode")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<decimal>("MtlBurCost");

                    b.Property<decimal>("MtlBurRate");

                    b.Property<int>("MtlSeq");

                    b.Property<bool>("Ordered");

                    b.Property<int>("OrigGroupSeq");

                    b.Property<string>("OrigStructTag")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("PCLinkRemoved");

                    b.Property<int>("POCostingDirection");

                    b.Property<decimal>("POCostingFactor");

                    b.Property<decimal>("POCostingUnitVal");

                    b.Property<string>("PartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PickError")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<decimal>("PlannedQtyPerUnit");

                    b.Property<string>("Plant")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("PricePerCode")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("PricingUOM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("ProdCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("PurComment")
                        .IsRequired();

                    b.Property<string>("PurPoint")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<decimal>("QtyPer");

                    b.Property<decimal>("QtyStagedToDate");

                    b.Property<int>("RFQLine");

                    b.Property<bool>("RFQNeeded");

                    b.Property<int>("RFQNum");

                    b.Property<string>("RFQStat")
                        .IsRequired()
                        .HasMaxLength(1);

                    b.Property<int>("RFQVendQuotes");

                    b.Property<bool>("RcvInspectionReq");

                    b.Property<bool>("ReassignSNAsm");

                    b.Property<int>("RelatedOperation");

                    b.Property<bool>("RemovedFromPlan");

                    b.Property<DateTime?>("ReqDate")
                        .HasColumnType("date");

                    b.Property<int>("ReqRefDes");

                    b.Property<decimal>("RequiredQty");

                    b.Property<string>("ResReasonCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("RevisionNum")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.Property<decimal>("Rpt1BillableUnitPrice");

                    b.Property<decimal>("Rpt1UnitPrice");

                    b.Property<decimal>("Rpt2BillableUnitPrice");

                    b.Property<decimal>("Rpt2UnitPrice");

                    b.Property<decimal>("Rpt3BillableUnitPrice");

                    b.Property<decimal>("Rpt3UnitPrice");

                    b.Property<string>("SCMiscCode")
                        .IsRequired()
                        .HasMaxLength(4);

                    b.Property<decimal>("SalvageBurCredit");

                    b.Property<decimal>("SalvageCredit");

                    b.Property<string>("SalvageDescription")
                        .IsRequired();

                    b.Property<decimal>("SalvageEstBurUnitCredit");

                    b.Property<decimal>("SalvageEstLbrUnitCredit");

                    b.Property<decimal>("SalvageEstMtlBurUnitCredit");

                    b.Property<decimal>("SalvageEstMtlUnitCredit");

                    b.Property<decimal>("SalvageEstSubUnitCredit");

                    b.Property<decimal>("SalvageLbrCredit");

                    b.Property<decimal>("SalvageMtlBurCredit");

                    b.Property<decimal>("SalvageMtlBurRate");

                    b.Property<decimal>("SalvageMtlCredit");

                    b.Property<string>("SalvagePartNum")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("SalvageQtyPer");

                    b.Property<decimal>("SalvageQtyToDate");

                    b.Property<decimal>("SalvageSubCredit");

                    b.Property<string>("SalvageUM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<decimal>("SalvageUnitCredit");

                    b.Property<bool>("SelectForPicking");

                    b.Property<decimal>("ShippedQty");

                    b.Property<string>("ShowStatusIcon")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("SndAlrtCmpl");

                    b.Property<string>("StagingBinNum")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("StagingLotNum")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("StagingWarehouseCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<int>("TenantId");

                    b.Property<decimal>("TotalCost");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("VendorNum");

                    b.Property<DateTime?>("WIReqDate")
                        .HasColumnType("date");

                    b.Property<string>("WarehouseCode")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<decimal>("Weight");

                    b.Property<string>("WeightUOM")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<bool>("WhseAllocFlag");

                    b.HasKey("Id");

                    b.ToTable("JobMtl");
                });

            modelBuilder.Entity("OplugAbpProject.MultiTenancy.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(1024);

                    b.Property<DateTime>("CreationTime");

                    b.Property<long?>("CreatorUserId");

                    b.Property<long?>("DeleterUserId");

                    b.Property<DateTime?>("DeletionTime");

                    b.Property<int?>("EditionId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("LastModificationTime");

                    b.Property<long?>("LastModifierUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("TenancyName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("DeleterUserId");

                    b.HasIndex("EditionId");

                    b.HasIndex("LastModifierUserId");

                    b.HasIndex("TenancyName");

                    b.ToTable("AbpTenants");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");

                    b.Property<int>("EditionId");

                    b.HasIndex("EditionId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("EditionFeatureSetting");
                });

            modelBuilder.Entity("Abp.MultiTenancy.TenantFeatureSetting", b =>
                {
                    b.HasBaseType("Abp.Application.Features.FeatureSetting");


                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpFeatures");

                    b.HasDiscriminator().HasValue("TenantFeatureSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<int>("RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("RolePermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasBaseType("Abp.Authorization.PermissionSetting");

                    b.Property<long>("UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AbpPermissions");

                    b.HasDiscriminator().HasValue("UserPermissionSetting");
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RoleClaim", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Roles.Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserClaim", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserLogin", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserRole", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserToken", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Configuration.Setting", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User")
                        .WithMany("Settings")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChangeSet")
                        .WithMany("EntityChanges")
                        .HasForeignKey("EntityChangeSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.EntityHistory.EntityPropertyChange", b =>
                {
                    b.HasOne("Abp.EntityHistory.EntityChange")
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Organizations.OrganizationUnit", b =>
                {
                    b.HasOne("Abp.Organizations.OrganizationUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("OplugAbpProject.Authorization.Roles.Role", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("OplugAbpProject.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("OplugAbpProject.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("OplugAbpProject.Authorization.Users.User", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("OplugAbpProject.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("OplugAbpProject.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("OplugAbpProject.MultiTenancy.Tenant", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId");

                    b.HasOne("OplugAbpProject.Authorization.Users.User", "DeleterUser")
                        .WithMany()
                        .HasForeignKey("DeleterUserId");

                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId");

                    b.HasOne("OplugAbpProject.Authorization.Users.User", "LastModifierUser")
                        .WithMany()
                        .HasForeignKey("LastModifierUserId");
                });

            modelBuilder.Entity("Abp.Application.Features.EditionFeatureSetting", b =>
                {
                    b.HasOne("Abp.Application.Editions.Edition", "Edition")
                        .WithMany()
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Roles.RolePermissionSetting", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Roles.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Abp.Authorization.Users.UserPermissionSetting", b =>
                {
                    b.HasOne("OplugAbpProject.Authorization.Users.User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
